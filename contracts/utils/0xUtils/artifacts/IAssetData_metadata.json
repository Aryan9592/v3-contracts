{
	"compiler": {
		"version": "0.7.4+commit.3f05b770"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "tokenIds",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "callbackData",
						"type": "bytes"
					}
				],
				"name": "ERC1155Assets",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "bridgeAddress",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "bridgeData",
						"type": "bytes"
					}
				],
				"name": "ERC20Bridge",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "ERC20Token",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ERC721Token",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "nestedAssetData",
						"type": "bytes[]"
					}
				],
				"name": "MultiAsset",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "staticCallTargetAddress",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "staticCallData",
						"type": "bytes"
					},
					{
						"internalType": "bytes32",
						"name": "expectedReturnDataHash",
						"type": "bytes32"
					}
				],
				"name": "StaticCall",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"ERC1155Assets(address,uint256[],uint256[],bytes)": {
					"details": "Function signature for encoding ERC1155 assetData.",
					"params": {
						"callbackData": "Extra data to be passed to receiver's `onERC1155Received` callback function.",
						"tokenAddress": "Address of ERC1155 token contract.",
						"tokenIds": "Array of ids of tokens to be transferred.",
						"values": "Array of values that correspond to each token id to be transferred.        Note that each value will be multiplied by the amount being filled in the order before transferring."
					}
				},
				"ERC20Bridge(address,address,bytes)": {
					"details": "Function signature for encoding ERC20Bridge assetData.",
					"params": {
						"bridgeAddress": "Address of the bridge contract.",
						"bridgeData": "Arbitrary data to be passed to the bridge contract.",
						"tokenAddress": "Address of token to transfer."
					}
				},
				"ERC20Token(address)": {
					"details": "Function signature for encoding ERC20 assetData.",
					"params": {
						"tokenAddress": "Address of ERC20Token contract."
					}
				},
				"ERC721Token(address,uint256)": {
					"details": "Function signature for encoding ERC721 assetData.",
					"params": {
						"tokenAddress": "Address of ERC721 token contract.",
						"tokenId": "Id of ERC721 token to be transferred."
					}
				},
				"MultiAsset(uint256[],bytes[])": {
					"details": "Function signature for encoding MultiAsset assetData.",
					"params": {
						"nestedAssetData": "Array of assetData fields that will be be dispatched to their correspnding AssetProxy contract.",
						"values": "Array of amounts that correspond to each asset to be transferred.        Note that each value will be multiplied by the amount being filled in the order before transferring."
					}
				},
				"StaticCall(address,bytes,bytes32)": {
					"details": "Function signature for encoding StaticCall assetData.",
					"params": {
						"expectedReturnDataHash": "Keccak-256 hash of the expected staticcall return data.",
						"staticCallData": "Data that will be executed via staticcall on the staticCallTargetAddress.",
						"staticCallTargetAddress": "Address that will execute the staticcall."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/utils/0xUtils/IAssetData.sol": "IAssetData"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/utils/0xUtils/IAssetData.sol": {
			"keccak256": "0x8bb458d8217a292ffcfeac1d986f6711264a9b563b2bbef7c01faede6299386c",
			"urls": [
				"bzz-raw://cdfb529ebb5f090f738f49dd115036ca38cacc9ecabd1958ca893897aadc42dd",
				"dweb:/ipfs/Qmehuc5shRD8jamTouKxrTBjJPvZpj8an9ygDxvYMCLPv3"
			]
		}
	},
	"version": 1
}