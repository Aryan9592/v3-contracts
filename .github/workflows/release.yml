name: Release

on:
  workflow_dispatch:
      inputs:
#          ci_status:
#              description: 'required CI status'
#              default: 'success'
#              required: true
#          default_bump:
#            description: patch-minor-major
#            default: patch
          prerelease:
            description: prerelease name
            required: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        solidity: [""]
        settings: ['{"optimizer":{"enabled":true,"runs":200}}']
    env:
      SOLIDITY_VERSION: ${{ matrix.solidity }}
      SOLIDITY_SETTINGS: ${{ matrix.settings }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.7.0
      - uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - run: yarn --frozen-lockfile
      - run: yarn build
      #- run: yarn test

  bump_version:
    name: Bump Version
    runs-on: ubuntu-latest
    needs: build
    outputs:
      new_tag: ${{ steps.github_tag_action.outputs.new_tag }}
      changelog: ${{ steps.github_tag_action.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PUBLISH_GITHUB_TOKEN }}

      - name: Bump version and push tag
        id: github_tag_action
        uses: mathieudutour/github-tag-action@331898d5052eedac9b15fec867b5ba66ebf9b692
        with:
          github_token: ${{ secrets.PUBLISH_GITHUB_TOKEN }}
          release_branches: development
          # Comment following line if want to create new tag at each commit.
          # A new release will be created only with exact commit message.
          default_bump: false #github.event.input.default_bump

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: bump_version
    if: ${{ needs.bump_version.outputs.new_tag != null }}
    steps:
#      - name: Check Successful Status
#        run: |
#          REF_STATUS=$(curl -s \
#          'https://api.github.com/repos/${{ github.repository }}/commits/${{ github.ref }}/status' \
#          | jq .state)
#          [[ "${REF_STATUS}" == '"${{ github.event.inputs.ci_status }}"' ]] || \
#          (echo "::error ::${{ github.ref }} does not have a successful CI status" && false)
#      - uses: actions/checkout@v2
#        with:
#          ref: ${{ github.ref }}
#          fetch-depth: 0
#
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Create Github Release
        uses: actions/create-release@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.bump_version.outputs.new_tag }}
          release_name: Release ${{ needs.bump_version.outputs.new_tag }}
          body: |
            ${{ needs.bump_version.outputs.changelog }}

      - name: Configure Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "Github Actions"

      - name: Merge Into Main Branch'
        env:
          GITHUB_TOKEN: ${{ github.token }}
          PUBLISH_PRERELEASE: ${{ github.event.inputs.prerelease }}
        if: github.event.inputs.prerelease == '' # unless it's a prerelease
        run: |
          git checkout main && \
          git merge ${{ github.ref }} && \
          git push

  publish-npm:
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        solidity: [""]
        settings: ['{"optimizer":{"enabled":true,"runs":200}}']
    env:
      SOLIDITY_VERSION: ${{ matrix.solidity }}
      SOLIDITY_SETTINGS: ${{ matrix.settings }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.7.0
          registry-url: https://registry.npmjs.org/
          always-auth: true
      - uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - run: yarn --frozen-lockfile
      - run: yarn publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
