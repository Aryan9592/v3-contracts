{
	"compiler": {
		"version": "0.7.5+commit.eb77ed08"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "numPoolsToFinalize",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardsAvailable",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalFeesCollected",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalWeightedStake",
						"type": "uint256"
					}
				],
				"name": "EpochEnded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardsPaid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardsRemaining",
						"type": "uint256"
					}
				],
				"name": "EpochFinalized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "fromStatus",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "fromPool",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "toStatus",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "toPool",
						"type": "bytes32"
					}
				],
				"name": "MoveStake",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "oldOperatorShare",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "newOperatorShare",
						"type": "uint32"
					}
				],
				"name": "OperatorShareDecreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "epochDurationInSeconds",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "rewardDelegatedStakeWeight",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "minimumPoolStake",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "cobbDouglasAlphaNumerator",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "cobbDouglasAlphaDenominator",
						"type": "uint256"
					}
				],
				"name": "ParamsSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "exchangeAddress",
						"type": "address"
					}
				],
				"name": "PopAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "exchangeAddress",
						"type": "address"
					}
				],
				"name": "PopRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "rbPoolAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "RbPoolStakingPoolSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "operatorReward",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "membersReward",
						"type": "uint256"
					}
				],
				"name": "RewardsPaid",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Stake",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "operatorShare",
						"type": "uint32"
					}
				],
				"name": "StakingPoolCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "StakingPoolEarnedRewardsInEpoch",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Unstake",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "addAuthorizedAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "addPopAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "aggregatedStatsByEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "rewardsAvailable",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "numPoolsToFinalize",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalFeesCollected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalWeightedStake",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalRewardsFinalized",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "authorities",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "authorized",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cobbDouglasAlphaDenominator",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cobbDouglasAlphaNumerator",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "member",
						"type": "address"
					}
				],
				"name": "computeRewardBalanceOfDelegator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "computeRewardBalanceOfOperator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "rigoblockPoolAddress",
						"type": "address"
					}
				],
				"name": "createStakingPool",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "poolAccount",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "popReward",
						"type": "uint256"
					}
				],
				"name": "creditPopReward",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentEpochStartTimeInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "uint32",
						"name": "newOperatorShare",
						"type": "uint32"
					}
				],
				"name": "decreaseStakingPoolOperatorShare",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "endEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "epochDurationInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "finalizePool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAuthorizedAddresses",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCurrentEpochEarliestEndTimeInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getDragoRegistry",
				"outputs": [
					{
						"internalType": "contract IDragoRegistry",
						"name": "dragoRegistry",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum IStructs.StakeStatus",
						"name": "stakeStatus",
						"type": "uint8"
					}
				],
				"name": "getGlobalStakeByStatus",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getGrgContract",
				"outputs": [
					{
						"internalType": "contract RigoTokenFace",
						"name": "grgContract",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getGrgVault",
				"outputs": [
					{
						"internalType": "contract IGrgVault",
						"name": "grgVault",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"internalType": "enum IStructs.StakeStatus",
						"name": "stakeStatus",
						"type": "uint8"
					}
				],
				"name": "getOwnerStakeByStatus",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getParams",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_epochDurationInSeconds",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_rewardDelegatedStakeWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_minimumPoolStake",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaNumerator",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaDenominator",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakeDelegatedToPoolByOwner",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakingPool",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "operator",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "stakingPal",
								"type": "address"
							},
							{
								"internalType": "uint32",
								"name": "operatorShare",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "stakingPalShare",
								"type": "uint32"
							}
						],
						"internalType": "struct IStructs.Pool",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakingPoolStatsThisEpoch",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "feesCollected",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "weightedStake",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "membersStake",
								"type": "uint256"
							}
						],
						"internalType": "struct IStructs.PoolStats",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					}
				],
				"name": "getTotalStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getTotalStakeDelegatedToPool",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "grgReservedForPoolRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "init",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "stakingPoolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "rigoblockPoolAccount",
						"type": "address"
					}
				],
				"name": "joinStakingPoolAsRbPoolAccount",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minimumPoolStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "enum IStructs.StakeStatus",
								"name": "status",
								"type": "uint8"
							},
							{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}
						],
						"internalType": "struct IStructs.StakeInfo",
						"name": "from",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "enum IStructs.StakeStatus",
								"name": "status",
								"type": "uint8"
							},
							{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}
						],
						"internalType": "struct IStructs.StakeInfo",
						"name": "to",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "moveStake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "poolIdByRbPoolAccount",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "poolStatsByEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "feesCollected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "weightedStake",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "membersStake",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "removeAuthorizedAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "removeAuthorizedAddressAtIndex",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "removePopAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardDelegatedStakeWeight",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "rewardsByPoolId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_epochDurationInSeconds",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_rewardDelegatedStakeWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_minimumPoolStake",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaNumerator",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaDenominator",
						"type": "uint32"
					}
				],
				"name": "setParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "newStakingPalAddress",
						"type": "address"
					}
				],
				"name": "setStakingPalAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingContract",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "unstake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "validPops",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "withdrawDelegatorRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addAuthorizedAddress(address)": {
					"details": "Authorizes an address.",
					"params": {
						"target": "Address to authorize."
					}
				},
				"addPopAddress(address)": {
					"details": "Adds a new proof_of_performance address.",
					"params": {
						"addr": "Address of proof_of_performance contract to add."
					}
				},
				"computeRewardBalanceOfDelegator(bytes32,address)": {
					"details": "Computes the reward balance in ETH of a specific member of a pool.",
					"params": {
						"member": "The member of the pool.",
						"poolId": "Unique id of pool."
					},
					"returns": {
						"reward": "Balance in ETH."
					}
				},
				"computeRewardBalanceOfOperator(bytes32)": {
					"details": "Computes the reward balance in ETH of the operator of a pool.",
					"params": {
						"poolId": "Unique id of pool."
					},
					"returns": {
						"reward": "Balance in ETH."
					}
				},
				"createStakingPool(address)": {
					"details": "Create a new staking pool. The sender will be the staking pal of this pool. Note that a staking pal must be payable.",
					"params": {
						"rigoblockPoolAddress": "Adds rigoblock pool to the created staking pool for convenience if non-null."
					},
					"returns": {
						"poolId": "The unique pool id generated for this pool."
					}
				},
				"creditPopReward(address,uint256)": {
					"details": "Credits the value of a pool's pop reward.      Only a known RigoBlock pop can call this method. See      (MixinPopManager).",
					"params": {
						"poolAccount": "The address of the rigoblock pool account.",
						"popReward": "The pop reward."
					}
				},
				"decreaseStakingPoolOperatorShare(bytes32,uint32)": {
					"details": "Decreases the operator share for the given pool (i.e. increases pool rewards for members).",
					"params": {
						"newOperatorShare": "The newly decreased percentage of any rewards owned by the operator.",
						"poolId": "Unique Id of pool."
					}
				},
				"endEpoch()": {
					"details": "Begins a new epoch, preparing the prior one for finalization.      Throws if not enough time has passed between epochs or if the      previous epoch was not fully finalized.",
					"returns": {
						"_0": "numPoolsToFinalize The number of unfinalized pools."
					}
				},
				"finalizePool(bytes32)": {
					"details": "Instantly finalizes a single pool that earned rewards in the previous      epoch, crediting it rewards for members and withdrawing operator's      rewards as WETH. This can be called by internal functions that need      to finalize a pool immediately. Does nothing if the pool is already      finalized or did not earn rewards in the previous epoch.",
					"params": {
						"poolId": "The pool ID to finalize."
					}
				},
				"getAuthorizedAddresses()": {
					"details": "Gets all authorized addresses.",
					"returns": {
						"_0": "Array of authorized addresses."
					}
				},
				"getCurrentEpochEarliestEndTimeInSeconds()": {
					"details": "Returns the earliest end time in seconds of this epoch.      The next epoch can begin once this time is reached.      Epoch period = [startTimeInSeconds..endTimeInSeconds)",
					"returns": {
						"_0": "Time in seconds."
					}
				},
				"getDragoRegistry()": {
					"details": "An overridable way to access the deployed dragoRegistry.      Must be view to allow overrides to access state.",
					"returns": {
						"dragoRegistry": "The dragoRegistry contract."
					}
				},
				"getGlobalStakeByStatus(uint8)": {
					"details": "Gets global stake for a given status.",
					"params": {
						"stakeStatus": "UNDELEGATED or DELEGATED"
					},
					"returns": {
						"balance": "Global stake for given status."
					}
				},
				"getGrgContract()": {
					"details": "An overridable way to access the deployed GRG contract.      Must be view to allow overrides to access state.",
					"returns": {
						"grgContract": "The GRG contract instance."
					}
				},
				"getGrgVault()": {
					"details": "An overridable way to access the deployed grgVault.      Must be view to allow overrides to access state.",
					"returns": {
						"grgVault": "The grgVault contract."
					}
				},
				"getOwnerStakeByStatus(address,uint8)": {
					"details": "Gets an owner's stake balances by status.",
					"params": {
						"stakeStatus": "UNDELEGATED or DELEGATED",
						"staker": "Owner of stake."
					},
					"returns": {
						"balance": "Owner's stake balances for given status."
					}
				},
				"getParams()": {
					"details": "Retrieves all configurable parameter values.",
					"returns": {
						"_cobbDouglasAlphaDenominator": "Denominator for cobb douglas alpha factor.",
						"_cobbDouglasAlphaNumerator": "Numerator for cobb douglas alpha factor.",
						"_epochDurationInSeconds": "Minimum seconds between epochs.",
						"_minimumPoolStake": "Minimum amount of stake required in a pool to collect rewards.",
						"_rewardDelegatedStakeWeight": "How much delegated stake is weighted vs operator stake, in ppm."
					}
				},
				"getStakeDelegatedToPoolByOwner(address,bytes32)": {
					"params": {
						"poolId": "Unique Id of pool.",
						"staker": "of stake."
					},
					"returns": {
						"balance": "Stake delegated to pool by staker."
					}
				},
				"getStakingPool(bytes32)": {
					"details": "Returns a staking pool",
					"params": {
						"poolId": "Unique id of pool."
					}
				},
				"getStakingPoolStatsThisEpoch(bytes32)": {
					"details": "Get stats on a staking pool in this epoch.",
					"params": {
						"poolId": "Pool Id to query."
					},
					"returns": {
						"_0": "PoolStats struct for pool id."
					}
				},
				"getTotalStake(address)": {
					"details": "Returns the total stake for a given staker.",
					"params": {
						"staker": "of stake."
					},
					"returns": {
						"_0": "Total GRG staked by `staker`."
					}
				},
				"getTotalStakeDelegatedToPool(bytes32)": {
					"details": "Returns the total stake delegated to a specific staking pool,      across all members.",
					"params": {
						"poolId": "Unique Id of pool."
					},
					"returns": {
						"balance": "Total stake delegated to pool."
					}
				},
				"init()": {
					"details": "Initialize storage owned by this contract.      This function should not be called directly.      The StakingProxy contract will call it in `attachStakingContract()`."
				},
				"joinStakingPoolAsRbPoolAccount(bytes32,address)": {
					"details": "Allows caller to join a staking pool as a rigoblock pool id subaccount.",
					"params": {
						"rigoblockPoolAccount": "Address of subaccount to be added to staking pool.",
						"stakingPoolId": "Unique id of staking pool."
					}
				},
				"moveStake((uint8,bytes32),(uint8,bytes32),uint256)": {
					"details": "Moves stake between statuses: 'undelegated' or 'delegated'.      Delegated stake can also be moved between pools.      This change comes into effect next epoch.",
					"params": {
						"amount": "of stake to move.",
						"from": "status to move stake out of.",
						"to": "status to move stake into."
					}
				},
				"removeAuthorizedAddress(address)": {
					"details": "Removes authorizion of an address.",
					"params": {
						"target": "Address to remove authorization from."
					}
				},
				"removeAuthorizedAddressAtIndex(address,uint256)": {
					"details": "Removes authorizion of an address.",
					"params": {
						"index": "Index of target in authorities array.",
						"target": "Address to remove authorization from."
					}
				},
				"removePopAddress(address)": {
					"details": "Removes an existing proof_of_performance address.",
					"params": {
						"addr": "Address of proof_of_performance contract to remove."
					}
				},
				"setParams(uint256,uint32,uint256,uint32,uint32)": {
					"details": "Set all configurable parameters at once.",
					"params": {
						"_cobbDouglasAlphaDenominator": "Denominator for cobb douglas alpha factor.",
						"_cobbDouglasAlphaNumerator": "Numerator for cobb douglas alpha factor.",
						"_epochDurationInSeconds": "Minimum seconds between epochs.",
						"_minimumPoolStake": "Minimum amount of stake required in a pool to collect rewards.",
						"_rewardDelegatedStakeWeight": "How much delegated stake is weighted vs operator stake, in ppm."
					}
				},
				"setStakingPalAddress(bytes32,address)": {
					"details": "Allows the operator to update the staking pal address.",
					"params": {
						"newStakingPalAddress": "Address of the new staking pal.",
						"poolId": "Unique id of pool."
					}
				},
				"stake(uint256)": {
					"details": "Stake GRG tokens. Tokens are deposited into the GRG Vault.      Unstake to retrieve the GRG. Stake is in the 'Active' status.",
					"params": {
						"amount": "of GRG to stake."
					}
				},
				"transferOwnership(address)": {
					"details": "Change the owner of this contract.",
					"params": {
						"newOwner": "New owner address."
					}
				},
				"unstake(uint256)": {
					"details": "Unstake. Tokens are withdrawn from the GRG Vault and returned to      the staker. Stake must be in the 'undelegated' status in both the      current and next epoch in order to be unstaked.",
					"params": {
						"amount": "of GRG to unstake."
					}
				},
				"withdrawDelegatorRewards(bytes32)": {
					"details": "Withdraws the caller's WETH rewards that have accumulated      until the last epoch.",
					"params": {
						"poolId": "Unique id of pool."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/staking/sys/MixinScheduler.sol": "MixinScheduler"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/protocol/DragoRegistry/IDragoRegistry.sol": {
			"keccak256": "0x8f7cd2738495503e9b181687f89bbce100cdf71d743f5405adb891d939d6e9ed",
			"urls": [
				"bzz-raw://8c286b20b97a896b3e247923792f9b1f065f2600c47e81802958db936f34beb3",
				"dweb:/ipfs/QmRUNsPP4xG171EPVYdZzWqB2JRvcPoij7r4TWr8CgLw4f"
			]
		},
		"localhost/rigoToken/RigoToken/RigoTokenFace.sol": {
			"keccak256": "0x36c3c5a0a73bde4ef143fde2fcbdfc060cba6a7b01cc1304de9ddd030ac9dd6b",
			"urls": [
				"bzz-raw://93768cb08c3c517d57c56da2258d52dd2eaf836a5c70ca239a2106f867aae8da",
				"dweb:/ipfs/QmQKi1od8hzeBhFQHnDfPhwwhHZGBbGFLrMtDs7FWyeGdq"
			]
		},
		"localhost/staking/immutable/MixinConstants.sol": {
			"keccak256": "0xd133fd2262134f233f569d2d818f4816c936a57d4749eaa3e39b024117beb2e9",
			"urls": [
				"bzz-raw://248bbe0ccfe971cea5e62f71b54a4cb587e3a873a9b583646156ccfb79c4a29f",
				"dweb:/ipfs/QmWu2ohc6tFKzay1ZTnFugmzLhJhTB9wqvTgiTEdcVVkNz"
			]
		},
		"localhost/staking/immutable/MixinStorage.sol": {
			"keccak256": "0x1afc1f20c80bf2f79bac69748476f2242ff0bb715187e8b37d21fd7718713cfd",
			"urls": [
				"bzz-raw://6d39d33475a70f3236cae25f2ffdef8a990b1fa156485d9144e1b08a6cc942b4",
				"dweb:/ipfs/QmSZzhGM2PZ19UdMCcwMCWxKCNyw9Se2qMn8BXmYUtLrCa"
			]
		},
		"localhost/staking/interfaces/IGrgVault.sol": {
			"keccak256": "0xed5ec7fce9f9acd1505143f58294013739e966d6763394445b469b57c8400d2e",
			"urls": [
				"bzz-raw://bc5de5fd786789cf52da56e4001b22a1d7d39e8e0f9e54c2423c20090798ad16",
				"dweb:/ipfs/QmVz4Wv9576PhPKNq3a7fFSaDpienBYczwZc9fgHeusy8m"
			]
		},
		"localhost/staking/interfaces/IStaking.sol": {
			"keccak256": "0x67202751e4c2266b1c62fcfc9dc2b3e974dbe4533df4bbcacab2794542be8463",
			"urls": [
				"bzz-raw://e426b2c7ba3ab8501ba8ececc3974a8da9a1c22a61ed52027b55c3feec9369d6",
				"dweb:/ipfs/QmYCwmKFgFYxLMuPHPVDLS6tTUvuARAs6DsecZotyLjg1T"
			]
		},
		"localhost/staking/interfaces/IStakingEvents.sol": {
			"keccak256": "0xbdab45a9ae55569d50ed5bba9ae2ce4aefa243061890c16d5fbb627abdd457b1",
			"urls": [
				"bzz-raw://8229645560d07125019b92cf0c44b5a0075de831272f79182d2500dae1dff7b7",
				"dweb:/ipfs/QmYZ2ScVZVWzjEfAioyW4ppo5DeyEDrwjS6qYPMSctS4KE"
			]
		},
		"localhost/staking/interfaces/IStructs.sol": {
			"keccak256": "0x10c400a91961455ca5ea5fed8e60b320b1fdf7903dcdc5fe8a7cb8714cd67b3d",
			"urls": [
				"bzz-raw://b9aa6fbb76c818a8f75a8ebb44850a7093885fa2132f0539d28008555766ddbd",
				"dweb:/ipfs/QmSZcmRbdn7mHGEG3fm2oAnBK5occLFqg9TyZWiufqobWy"
			]
		},
		"localhost/staking/libs/LibStakingRichErrors.sol": {
			"keccak256": "0xa460e858869ff0915eceb9421f646f57475c7ca6960163af3bb875b230422e40",
			"urls": [
				"bzz-raw://ee3327da0d1208ae41968d7da1697564974193974898064bde8135187b760eb0",
				"dweb:/ipfs/QmVANkJumvZFpso47ovD9N9AdWyQt2kbquTH3s8cgaWDmF"
			]
		},
		"localhost/staking/sys/MixinScheduler.sol": {
			"keccak256": "0x419fc4ecfaac79ad3c4997033d4d91b84f36cb5d80de45a5ed48ced635f51243",
			"urls": [
				"bzz-raw://67ac6338fb6970e11658ad3729f262162f05aca14b6dcf2b88af95c0f92289bd",
				"dweb:/ipfs/QmW756pWh1vmigYQJ9SM7rB4MHtfR7qz5cfagj6osQuKhR"
			]
		},
		"localhost/utils/0xUtils/Authorizable.sol": {
			"keccak256": "0x3ebc649c9b70b060a8473808c83cfab10c81d57497cd25a586ae9fd7c59d5cac",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://9da606abff60d0f4f525c11f1cce7a5433f7cbc04c9cd3e787138623daaf3c67",
				"dweb:/ipfs/QmZ6SDwoeJJp8rpLNcPCYQdEaz43tMT3rufpezorfUn7hY"
			]
		},
		"localhost/utils/0xUtils/LibAuthorizableRichErrors.sol": {
			"keccak256": "0x8c0f315ea1590470d9f80c7ada25943ddf4ae0a0b04c846b83b95176a112743b",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://4bbb595a249d4e018a81b8092b3ffe12ba174021bb101947e638a1f2346ec4a4",
				"dweb:/ipfs/QmeH59B9X8nB1hFkG8BdGt4s7NDj6Y5UcLnksuSNer7LdC"
			]
		},
		"localhost/utils/0xUtils/LibOwnableRichErrors.sol": {
			"keccak256": "0xe3e82add838ef586e9ffb43f2361ead50578c7047126f16005719d89f16b885f",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://794d7876c551a5082d2121e6dc819509987fe055c284186a081865223486e6e0",
				"dweb:/ipfs/QmTP7pJYXodGZRN9erWBpa1pEEhrwbcgR6NBmfskuieKdt"
			]
		},
		"localhost/utils/0xUtils/LibRichErrors.sol": {
			"keccak256": "0xc65d20d5519e4b34218877a01ee9e92fea348db5d208f4a077a4771cc491bd0f",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://f04bc0cb601f6484fdd70001e0576b97ac25c84b7f9610edd3e27b3faed81e54",
				"dweb:/ipfs/QmcQ5hGrgSxWAgcmMuTjHTAoscApLGPPP6HwmGRrwkD68B"
			]
		},
		"localhost/utils/0xUtils/LibSafeMath.sol": {
			"keccak256": "0xf64a6832c2f2604687fb74f51bd98af68d23de06ebc9b636b0a3359e4f449cd3",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://899df63a9cc60a42478b6940e719d065d30b1c52cdea890b2ab3c9ac1ac5ac3d",
				"dweb:/ipfs/Qmae8q6taohPcPhEQLtsEHv1RkxMCAQPn9xCmW4QGu8c1N"
			]
		},
		"localhost/utils/0xUtils/LibSafeMathRichErrors.sol": {
			"keccak256": "0x9e95687c06942b74104cac11d3eef619315baa66252d4b30983b1826fc0bfe00",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://f438260dc3c99e12a90bae8896c2f3b2050f23b4bf61c73bc5de7ecf3acb3dfb",
				"dweb:/ipfs/QmWNzUMEwWG7mrEuiZJMq41zUPZLCoStq9KpzNGDCT4QoC"
			]
		},
		"localhost/utils/0xUtils/Ownable.sol": {
			"keccak256": "0xf870a93a5dfb093a6934b5c0714697054df9a3d3d3b90a3253cf0f131027dc88",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://e4a137a0ba65a237a0c611099f955a3417c6ccd32f6f02573feee0ab86702e80",
				"dweb:/ipfs/QmVkgPJHBpGft1cbyQK1Vf1C8wHbgJsMs6y4AT9y8WtW6h"
			]
		},
		"localhost/utils/0xUtils/interfaces/IAuthorizable.sol": {
			"keccak256": "0x860f6de896230f68444c7c3ff602fc3072e17dd63a2b2b7a6bbbdaf67a5d7b95",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://acfefb77163ae5b76a25aabee78e2940800e21b8a036a9a184750152a6bfb79f",
				"dweb:/ipfs/QmQdwzeYqEevCBXi7CvYVBgd37gCSC1WdYpx1XceYHYEDK"
			]
		},
		"localhost/utils/0xUtils/interfaces/IOwnable.sol": {
			"keccak256": "0x3032970c426269f3de78bb6c605c9778def30698c9c39cf3d43961a661f96d23",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://264a3e245fa5a410fd9d400b690c9501a54fc44c053b1ffb7ddbbc7f4433ac80",
				"dweb:/ipfs/QmNrPzMnEQgsATdAEH5waYGuF147kM45D4HQAmVDiufaVn"
			]
		}
	},
	"version": 1
}