{
	"deploy": {
		"VM:-": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"main:1": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"ropsten:3": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"rinkeby:4": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"kovan:42": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"g√∂rli:5": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"Custom": {
			"linkReferences": {},
			"autoDeployLib": true
		}
	},
	"data": {
		"bytecode": {
			"linkReferences": {},
			"object": "6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a72315820902042c5a7d38cb0bcf1cc954ad26b71c7fe3d9a38803f667d05c325cff127ac64736f6c63430005110032",
			"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 SWAP1 KECCAK256 TIMESTAMP 0xC5 0xA7 0xD3 DUP13 0xB0 0xBC CALL 0xCC SWAP6 0x4A 0xD2 PUSH12 0x71C7FE3D9A38803F667D05C3 0x25 0xCF CALL 0x27 0xAC PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
			"sourceMap": "34:1111:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34:1111:0;;;;;;;"
		},
		"deployedBytecode": {
			"linkReferences": {},
			"object": "6080604052600080fdfea265627a7a72315820902042c5a7d38cb0bcf1cc954ad26b71c7fe3d9a38803f667d05c325cff127ac64736f6c63430005110032",
			"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 SWAP1 KECCAK256 TIMESTAMP 0xC5 0xA7 0xD3 DUP13 0xB0 0xBC CALL 0xCC SWAP6 0x4A 0xD2 PUSH12 0x71C7FE3D9A38803F667D05C3 0x25 0xCF CALL 0x27 0xAC PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
			"sourceMap": "34:1111:0:-;;;;;"
		},
		"gasEstimates": {
			"creation": {
				"codeDepositCost": "12400",
				"executionCost": "66",
				"totalCost": "12466"
			},
			"internal": {
				"max256(uint256,uint256)": "infinite",
				"max64(uint64,uint64)": "infinite",
				"min256(uint256,uint256)": "infinite",
				"min64(uint64,uint64)": "infinite",
				"safeAdd(uint256,uint256)": "infinite",
				"safeDiv(uint256,uint256)": "infinite",
				"safeMul(uint256,uint256)": "infinite",
				"safeSub(uint256,uint256)": "infinite"
			}
		},
		"methodIdentifiers": {}
	},
	"abi": []
}