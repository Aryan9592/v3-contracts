{
	"compiler": {
		"version": "0.7.4+commit.3f05b770"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "addressFromId",
				"outputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "group",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "authorityAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "calcPoolValue",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "aum",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "creditPopRewardToStakingProxy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "dragoRegistryAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getHwm",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getPoolData",
				"outputs": [
					{
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "poolAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "poolGroup",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "poolPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "poolSupply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "poolValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "epochReward",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "ratio",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "pop",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getPoolPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "poolPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalTokens",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getRewardParameters",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "epochReward",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "epochTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "ratio",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "isActive",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "proofOfPerformance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "popReward",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "performanceReward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rigoblockDaoAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newAuthorityAddress",
						"type": "address"
					}
				],
				"name": "setAuthority",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "groupAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "ratio",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "inflationFactor",
						"type": "uint256"
					}
				],
				"name": "setGroupParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newDragoRegistryAddress",
						"type": "address"
					}
				],
				"name": "setRegistry",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newRigoblockDaoAddress",
						"type": "address"
					}
				],
				"name": "setRigoblockDao",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Gabriele Rigo - <gab@rigoblock.com>",
			"kind": "dev",
			"methods": {
				"addressFromId(uint256)": {
					"details": "Returns the address and the group of a pool from its id.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"group": "Address of the pool's group.",
						"pool": "Address of the target pool."
					}
				},
				"calcPoolValue(uint256)": {
					"details": "Returns the value of a pool from its id.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"aum": "Total value of the pool in ETH."
					}
				},
				"creditPopRewardToStakingProxy(uint256)": {
					"details": "Credits the pop reward to the Staking Proxy contract.",
					"params": {
						"poolId": "Number of the pool Id in registry."
					}
				},
				"getHwm(uint256)": {
					"details": "Returns the highwatermark of a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"_0": "Value of the all-time-high pool nav."
					}
				},
				"getPoolData(uint256)": {
					"details": "Gets data of a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"active": "Bool the pool is active.",
						"epochReward": "value of the reward factor or said pool.",
						"poolAddress": "address of the pool.",
						"poolGroup": "address of the pool factory.",
						"poolPrice": "price of the pool in wei.",
						"poolSupply": "total supply of the pool in units.",
						"poolValue": "total value of the pool in wei.",
						"pop": "value of the pop reward to be claimed in GRGs.",
						"ratio": "of assets/performance reward (from 0 to 10000)."
					}
				},
				"getPoolPrice(uint256)": {
					"details": "Returns the price a pool from its id.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"poolPrice": "Price of the pool in wei.",
						"totalTokens": "Number of tokens of a pool (totalSupply)."
					}
				},
				"getRewardParameters(uint256)": {
					"details": "Returns the split ratio of asset and performance reward.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"epochReward": "Value of the reward factor.",
						"epochTime": "Value of epoch time.",
						"ratio": "Value of the ratio from 1 to 100."
					}
				},
				"isActive(uint256)": {
					"details": "Checks whether a pool is registered and active.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"_0": "Bool the pool is active."
					}
				},
				"proofOfPerformance(uint256)": {
					"details": "Returns the proof of performance reward for a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"performanceReward": "Split of the performance reward in Rigo tokens.",
						"popReward": "Value of the pop reward in Rigo tokens."
					}
				},
				"setAuthority(address)": {
					"details": "Allows rigoblock dao to update the authority.",
					"params": {
						"newAuthorityAddress": "Address of the authority."
					}
				},
				"setGroupParams(address,uint256,uint256)": {
					"details": "Allows RigoBlock Dao to set the parameters for a group.",
					"params": {
						"groupAddress": "Address of the pool's group.",
						"inflationFactor": "Value of the reward factor for a group.",
						"ratio": "Value of the ratio between assets and performance reward for a group."
					}
				},
				"setRegistry(address)": {
					"details": "Allows RigoBlock Dao to update the pools registry.",
					"params": {
						"newDragoRegistryAddress": "Address of new registry."
					}
				},
				"setRigoblockDao(address)": {
					"details": "Allows RigoBlock Dao to update its address.",
					"params": {
						"newRigoblockDaoAddress": "Address of new dao."
					}
				}
			},
			"title": "Proof of Performance Interface - Allows interaction with the PoP contract.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"proofOfPerformance(uint256)": {
					"notice": "epoch reward should be big enough that it.can be decreased if number of funds increases.should be at least 10^6 (just as pool base) to start with.rigo token has 10^18 decimals."
				},
				"setGroupParams(address,uint256,uint256)": {
					"notice": "onlyRigoblockDao can set ratio."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/rigoToken/ProofOfPerformance/ProofOfPerformanceFace.sol": "ProofOfPerformanceFace"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/rigoToken/ProofOfPerformance/ProofOfPerformanceFace.sol": {
			"keccak256": "0x79f93e7ceb62e57ca1ed966cf57142a8a988622792504d9faf12d93f23c393f2",
			"urls": [
				"bzz-raw://55e7c91a92811c7ec8b6c21c17c7345e43b3cf4d54d16e9fe4449487c5567f02",
				"dweb:/ipfs/QmQTWPwKNKA5wTHPudY8hJmcK7xtsCf6anSaCM5yKkfSfH"
			]
		}
	},
	"version": 1
}